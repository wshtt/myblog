<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AtomicBoolean</title>
    <url>/myblog/2020/12/12/AtomicBoolean/</url>
    <content><![CDATA[<h1 id="AtomicBoolean"><a href="#AtomicBoolean" class="headerlink" title="AtomicBoolean"></a>AtomicBoolean</h1><p>AtomicBoolean 这个类，他是线程安全的，它的compareAndSet方法是利用CAS来实现线程安全的，</p>
<p>它的两种用法：</p>
 <a id="more"></a> 

<p>1.保证某段语句只执行一次。 执行结束后不修改回false</p>
<p>首先我们要知道compareAndSet的作用，判断对象当时内部值是否为第一个参数，如果是则更新为第二个参数，且返回ture，否则返回false。那么默认初始化为false，则一个线程把他变为ture，compareAndSet返回ture，进入方法体执行逻辑，那么其他的任何线程进入该方法执行compareAndSet时第一个参数为false，而对象的内部值已经被修改为true，则永远过不了if。</p>
<pre><code>//创建新对象，提供默认值false
private static AtomicBoolean initialized = new AtomicBoolean(false);  

public void init()
&#123;   
    //第一个参数与默认值一致，把值改为第二个参数，返回true  后面在执行则都是false。
   if( initialized.compareAndSet(false, true) )
   &#123;
       // 这里放置初始化代码....
   &#125;
&#125;</code></pre>
<p>​<br>2.保证该方法只有一个线程执行，类似于锁的操作 执行结束后修改回false</p>
<p>方法只执行1次，那么方法执行结束的时候我把对象的值变成false，compareAndSet可以继续可以将对象则的值设置成true，返回true。</p>
<pre><code>@Override    
 public void run() &#123;     
     if (exists.compareAndSet(false, true)) &#123;    

         exists.set(false);      
    &#125; else &#123;    
         System.out.println(name + &quot; give up&quot;);    
    &#125;    

&#125;  </code></pre>
]]></content>
  </entry>
  <entry>
    <title>Jsoup</title>
    <url>/myblog/2020/12/12/Jsoup%20java%E8%A7%A3%E6%9E%90html%20xml%20%E7%AD%89/</url>
    <content><![CDATA[<h1 id="Jsoup"><a href="#Jsoup" class="headerlink" title="Jsoup"></a>Jsoup</h1><p><strong>jsoup是一款Java的HTML解析器，主要用来对HTML解析。</strong></p>
<p><strong>可以解析一系列标签结构的文件</strong>（xml，html，xhtml等等）</p>
 <a id="more"></a> 

<h4 id="一-、依赖"><a href="#一-、依赖" class="headerlink" title="一 、依赖"></a>一 、依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="二、获取Document-对象"><a href="#二、获取Document-对象" class="headerlink" title="二、获取Document 对象"></a>二、获取Document 对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 通过http https链接</span></span><br><span class="line">Connection connect = Jsoup.connect(<span class="string">&quot;http://www.baidu.com/&quot;</span>);</span><br><span class="line">Document document = connect.get();</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.jsoup.Connection 对象可以设置一些请求头之类的信息来模拟浏览器的行为</span></span><br><span class="line">connect.data(<span class="string">&quot;query&quot;</span>, <span class="string">&quot;Java&quot;</span>)			<span class="comment">// 数据</span></span><br><span class="line">    .userAgent(<span class="string">&quot;Mozilla&quot;</span>)				<span class="comment">//</span></span><br><span class="line">    .cookie(<span class="string">&quot;auth&quot;</span>, <span class="string">&quot;token&quot;</span>)			<span class="comment">// cookie</span></span><br><span class="line">    .timeout(<span class="number">3000</span>)						<span class="comment">//超时时间</span></span><br><span class="line">    .cookies(Map&lt;String,String&gt;)		<span class="comment">// cookies</span></span><br><span class="line">    .header(<span class="string">&quot;请求头&quot;</span>,<span class="string">&quot;&quot;</span>)				  <span class="comment">// 请求头</span></span><br><span class="line">    .headers(Map&lt;String,String&gt;);		<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">Document document = connect.get();</span><br><span class="line">   .post();							<span class="comment">// 请求方法，get post</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 通过字符串的html文件</span></span><br><span class="line">Document sss = Jsoup.parse(<span class="string">&quot;sss&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 通过一部分html 字符串，比如一个标签，这样会把所有</span></span><br><span class="line">Document sss = Jsoup.parseBodyFragment(<span class="string">&quot;sss&quot;</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>a</tag>
      </tags>
  </entry>
  <entry>
    <title>LocalDateTime</title>
    <url>/myblog/2020/12/12/LocalDate/</url>
    <content><![CDATA[<h1 id="LocalDate"><a href="#LocalDate" class="headerlink" title="LocalDate"></a>LocalDate</h1><p>​           </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. LocalDate是日期处理类，具体API如下：</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 获取当前日期</span></span><br><span class="line"> LocalDate now = LocalDate.now();</span><br><span class="line"> <span class="comment">// 设置日期</span></span><br><span class="line"> LocalDate localDate = LocalDate.of(<span class="number">2019</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line"> <span class="comment">// 获取年</span></span><br><span class="line"> <span class="keyword">int</span> year = localDate.getYear();     <span class="comment">//结果：2019</span></span><br><span class="line"> <span class="keyword">int</span> year1 = localDate.get(ChronoField.YEAR); <span class="comment">//结果：2019</span></span><br><span class="line"> <span class="comment">// 获取月</span></span><br><span class="line"> Month month = localDate.getMonth();   <span class="comment">// 结果：SEPTEMBER</span></span><br><span class="line"> <span class="keyword">int</span> month1 = localDate.get(ChronoField.MONTH_OF_YEAR); <span class="comment">//结果：9</span></span><br><span class="line"> <span class="comment">// 获取日</span></span><br><span class="line"> <span class="keyword">int</span> day = localDate.getDayOfMonth();   <span class="comment">//结果：10</span></span><br><span class="line"> <span class="keyword">int</span> day1 = localDate.get(ChronoField.DAY_OF_MONTH); <span class="comment">// 结果：10</span></span><br><span class="line"> <span class="comment">// 获取星期</span></span><br><span class="line"> DayOfWeek dayOfWeek = localDate.getDayOfWeek();   <span class="comment">//结果：TUESDAY</span></span><br><span class="line"> <span class="keyword">int</span> dayOfWeek1 = localDate.get(ChronoField.DAY_OF_WEEK); <span class="comment">//结果：2</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 2. LocalTime是时间处理类，具体API如下：</span></span><br><span class="line"></span><br><span class="line"> 复制代码</span><br><span class="line"> <span class="comment">// 获取当前时间</span></span><br><span class="line"> LocalTime now = LocalTime.now();</span><br><span class="line"> <span class="comment">// 设置时间</span></span><br><span class="line"> LocalTime localTime = LocalTime.of(<span class="number">13</span>, <span class="number">51</span>, <span class="number">10</span>);</span><br><span class="line"> <span class="comment">//获取小时</span></span><br><span class="line"> <span class="keyword">int</span> hour = localTime.getHour();    <span class="comment">// 结果：13</span></span><br><span class="line"> <span class="keyword">int</span> hour1 = localTime.get(ChronoField.HOUR_OF_DAY); <span class="comment">// 结果：13</span></span><br><span class="line"> <span class="comment">//获取分</span></span><br><span class="line"> <span class="keyword">int</span> minute = localTime.getMinute();  <span class="comment">// 结果：51</span></span><br><span class="line"> <span class="keyword">int</span> minute1 = localTime.get(ChronoField.MINUTE_OF_HOUR); <span class="comment">// 结果：51</span></span><br><span class="line"> <span class="comment">//获取秒</span></span><br><span class="line"> <span class="keyword">int</span> second = localTime.getSecond();   <span class="comment">// 结果：10</span></span><br><span class="line"> <span class="keyword">int</span> second1 = localTime.get(ChronoField.SECOND_OF_MINUTE); <span class="comment">// 结果：10</span></span><br><span class="line"> 复制代码</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 3. LocalDateTime可以设置年月日时分秒，相当于LocalDate + LocalTime</span></span><br><span class="line"></span><br><span class="line"> 复制代码</span><br><span class="line"> <span class="comment">// 获取当前日期时间</span></span><br><span class="line"> LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line"> <span class="comment">// 设置日期</span></span><br><span class="line"> LocalDateTime localDateTime1 = LocalDateTime.of(<span class="number">2019</span>, Month.SEPTEMBER, <span class="number">10</span>, <span class="number">14</span>, <span class="number">46</span>, <span class="number">56</span>);</span><br><span class="line"> LocalDateTime localDateTime2 = LocalDateTime.of(localDate, localTime);</span><br><span class="line"> LocalDateTime localDateTime3 = localDate.atTime(localTime);</span><br><span class="line"> LocalDateTime localDateTime4 = localTime.atDate(localDate);</span><br><span class="line"> <span class="comment">// 获取LocalDate</span></span><br><span class="line"> LocalDate localDate2 = localDateTime.toLocalDate();</span><br><span class="line"> <span class="comment">// 获取LocalTime</span></span><br><span class="line"> LocalTime localTime2 = localDateTime.toLocalTime();</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//标记当前时区的本地时间</span></span><br><span class="line">        LocalDate orderTime = orderStartTime.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Date转成LocalDateTime</span></span><br><span class="line"><span class="keyword">new</span> Date().toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime()</span><br><span class="line"></span><br><span class="line">  Date date = <span class="keyword">new</span> Date();</span><br><span class="line">  Instant instant = date.toInstant();</span><br><span class="line">  ZoneId zoneId = ZoneId.systemDefault();</span><br><span class="line"></span><br><span class="line">  LocalDateTime localDateTime = instant.atZone(zoneId).toLocalDateTime();</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>MultipartFile</title>
    <url>/myblog/2020/12/12/MultipartFile/</url>
    <content><![CDATA[<h1 id="MultipartFile"><a href="#MultipartFile" class="headerlink" title="MultipartFile"></a>MultipartFile</h1><p>[toc]</p>
<p>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.multipart;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.InputStreamSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.FileCopyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MultipartFile</span> <span class="keyword">extends</span> <span class="title">InputStreamSource</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 前端传递名称</span></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 源文件名</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">String <span class="title">getOriginalFilename</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">String <span class="title">getContentType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] getBytes() <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="function">InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Resource <span class="title">getResource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MultipartFileResource(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transferTo</span><span class="params">(File var1)</span> <span class="keyword">throws</span> IOException, IllegalStateException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">transferTo</span><span class="params">(Path dest)</span> <span class="keyword">throws</span> IOException, IllegalStateException </span>&#123;</span><br><span class="line">        FileCopyUtils.copy(<span class="keyword">this</span>.getInputStream(), Files.newOutputStream(dest));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>RandomStringUtils</title>
    <url>/myblog/2020/12/12/RandomStringUtils/</url>
    <content><![CDATA[<h1 id="RandomStringUtils"><a href="#RandomStringUtils" class="headerlink" title="RandomStringUtils"></a>RandomStringUtils</h1><pre><code>    Random object used by random method. This has to be not local to the random method so as to not return the same value in the same millisecond
    随机方法使用的随机对象。这必须不是局部的返回到随机方法，以便不返回相同的值同样的毫秒

    1. 
        public static String random(int count)
          创建一个随机字符串，其长度是指定的字符数。
          将从所有字符集中选择字符(中文环境乱码)
          RandomStringUtils.random(15)
    2.
        public static String random(int count, boolean letters, boolean numbers)
          count 创建一个随机字符串，其长度是指定的字符数,字符将从参数的字母数字字符集中选择，如参数所示。
          letters true,生成的字符串可以包括字母字符
          numbers true,生成的字符串可以包含数字字符
          （两个全部为false 则从所有字符集选择，中文环境乱码）
          RandomStringUtils.random(15, true, false)
    3. 
        public static String random(int count, String chars)
          创建一个随机字符串，其长度是指定的字符数。
          字符将从字符串指定的字符集中选择，不能为空。如果NULL，则使用所有字符集。
          RandomStringUtils.random(15,&quot;123abc&quot;)
    4.
        public static String random(int count, int start,int end,boolean letters, boolean numbers)
          创建一个随机字符串，其长度是指定的字符数,字符将从参数的字母数字字符集中选择，如参数所示。
          count:计算创建的随机字符长度
          start:字符集在开始时的位置
          end:字符集在结束前的位置，必须大于65
          letters true,生成的字符串可以包括字母字符
          numbers true,生成的字符串可以包含数字字符
          RandomStringUtils.random(1009, 5, 129, true, true)
    5. 
        public static String randomAlphabetic(int count)
          产生一个长度为指定的随机字符串的字符数，字符将从拉丁字母（a-z、A-Z的选择）。
          count:创建随机字符串的长度
          RandomStringUtils.randomAlphabetic(15)
    6.
        public static String randomAlphabetic(int minLengthInclusive, int maxLengthExclusive)
          创建一个随机字符串，其长度介于包含最小值和最大最大值之间,，字符将从拉丁字母（a-z、A-Z的选择）。
          minLengthInclusive ：要生成的字符串的包含最小长度
          maxLengthExclusive ：要生成的字符串的包含最大长度
          RandomStringUtils.randomAlphabetic(2, 15)
    7. 
        public static String randomAlphanumeric(int count)
          创建一个随机字符串，其长度是指定的字符数，字符将从拉丁字母（a-z、A-Z）和数字0-9中选择。
          count ：创建的随机数长度
          RandomStringUtils.randomAlphanumeric(5)

    8.
        public static String randomAlphanumeric(int minLengthInclusive,int maxLengthExclusive)
          创建一个随机字符串，其长度介于包含最小值和最大最大值之间,字符将从拉丁字母（a-z、A-Z）和数字0-9中选择。
          minLengthInclusive ：要生成的字符串的包含最小长度
          maxLengthExclusive ：要生成的字符串的包含最大长度
          RandomStringUtils.randomAlphanumeric(2,5)

    9. 
        public static String randomAscii(int count)
          创建一个随机字符串，其长度是指定的字符数，字符将从ASCII值介于32到126之间的字符集中选择（包括）
          count:随机字符串的长度
          RandomStringUtils.randomAscii(15)
    10.
        public static String randomAscii(int minLengthInclusive, int maxLengthExclusive)
          创建一个随机字符串，其长度介于包含最小值和最大最大值之间,字符将从ASCII值介于32到126之间的字符集中选择（包括）
          minLengthInclusive ：要生成的字符串的包含最小长度
          maxLengthExclusive ：要生成的字符串的包含最大长度
          RandomStringUtils.randomAscii(2, 15)
    11. 
        public static String randomNumeric(int count)
          创建一个随机字符串，其长度是指定的字符数，将从数字字符集中选择字符。
          count ：创建的随机数长度
          RandomStringUtils.randomNumeric(5)

    12.
        public static String randomNumeric(int minLengthInclusive,int maxLengthExclusive)
          创建一个随机字符串，其长度是指定的字符数，将从数字字符集中选择字符。
          minLengthInclusive ：要生成的字符串的包含最小长度
          maxLengthExclusive ：要生成的字符串的包含最大长度
          RandomStringUtils.randomNumeric(2,5)</code></pre>
<p>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​            </p>
]]></content>
  </entry>
  <entry>
    <title>String 的不可变</title>
    <url>/myblog/2020/12/12/String%E7%9A%84%E4%B8%8D%E5%8F%AF%E5%8F%98/</url>
    <content><![CDATA[<h1 id="String-的不可变"><a href="#String-的不可变" class="headerlink" title="String 的不可变"></a>String 的不可变</h1><ol>
<li><p>JAVA不可变类(immutable)机制与String的不可变性</p>
</li>
<li><p>不可变类简介</p>
<pre><code> 不可变类：所谓的不可变类是指这个类的实例一旦创建完成后，就不能改变其成员变量值。如JDK内部自带的很多不可变类：Interger、Long和String等。 

 可变类：相对于不可变类，可变类创建实例后可以改变其成员变量值，开发中创建的大部分类都属于可变类。</code></pre>
  <a id="more"></a> 
</li>
<li><p>不可变类的优点</p>
<pre><code> 说完可变类和不可变类的区别，我们需要进一步了解为什么要有不可变类？这样的特性对JAVA来说带来怎样的好处？

 线程安全 不可变对象是线程安全的，在线程之间可以相互共享，不需要利用特殊机制来保证同步问题，因为对象的值无法改变。可以降低并发错误的可能性，因为不需要用一些锁机制等保证内存一致性问题也减少了同步开销。

 易于构造、使用和测试</code></pre>
</li>
<li><p>不可变类的设计方法</p>
<pre><code> 1. 类添加final修饰符，保证类不被继承。 如果类可以被继承会破坏类的不可变性机制，只要继承类覆盖父类的方法并且继承类可以改变成员变量值，那么一旦子类以父类的形式出现时，不能保证当前类是否可变。

 2. 保证所有成员变量必须私有，并且加上final修饰 通过这种方式保证成员变量不可改变。但只做到这一步还不够，因为如果是对象成员变量有可能再外部改变其值。所以第4点弥补这个不足。

 3. 不提供改变成员变量的方法，包括setter 避免通过其他接口改变成员变量的值，破坏不可变特性。

 4.通过构造器初始化所有成员，进行深拷贝(deep copy)

   如果构造器传入的对象直接赋值给成员变量，还是可以通过对传入对象的修改进而导致改变内部变量的值。例如：

           public final class ImmutableDemo &#123;  
               private final int[] myArray;  
               public ImmutableDemo(int[] array) &#123;  
                   this.myArray = array; // wrong  
               &#125;  
           &#125;

 这种方式不能保证不可变性，myArray和array指向同一块内存地址，用户可以在ImmutableDemo之外通过修改array对象的值来改变myArray内部的值。 为了保证内部的值不被修改，可以采用深度copy来创建一个新内存保存传入的值。正确做法：

           public final class MyImmutableDemo &#123;  
               private final int[] myArray;  
               public MyImmutableDemo(int[] array) &#123;  
                   this.myArray = array.clone();   
               &#125;   
           &#125;

 5. 在getter方法中，不要直接返回对象本身，而是克隆对象，并返回对象的拷贝 这种做法也是防止对象外泄，防止通过getter获得内部可变成员对象后对成员变量直接操作，导致成员变量发生改变。</code></pre>
</li>
<li><p>String对象的不可变性</p>
<pre><code> public final class String
     implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence
 &#123;
     /** The value is used for character storage. */
     private final char value[];
     /** The offset is the first index of the storage that is used. */
     private final int offset;
     /** The count is the number of characters in the String. */
     private final int count;
     /** Cache the hash code for the string */
     private int hash; // Default to 0
     ....
     public String(char value[]) &#123;
          this.value = Arrays.copyOf(value, value.length); // deep copy操作
      &#125;
     ...
      public char[] toCharArray() &#123;
      // Cannot use Arrays.copyOf because of class initialization order issues
         char result[] = new char[value.length];
         System.arraycopy(value, 0, result, 0, value.length);
         return result;
     &#125;
     ...
 &#125;

 1.String类被final修饰，不可继承
 2.string内部所有成员都设置为私有变量
 3.不存在value的setter
 4.并将value和offset设置为final。
 5.当传入可变数组value[]时，进行copy而不是直接将value[]复制给内部变量.
 6.获取value时不是直接返回对象引用，而是返回对象的copy.</code></pre>
</li>
<li><p>String对象的不可变性的优缺点</p>
<pre><code> 从上一节分析，String数据不可变类，那设置这样的特性有什么好处呢？我总结为以下几点：

 1.字符串常量池的需要. 字符串常量池可以将一些字符常量放在常量池中重复使用，避免每次都重新创建相同的对象、节省存储空间。但如果字符串是可变的，此时相同内容的String还指向常量池的同一个内存空间，当某个变量改变了该内存的值时，其他遍历的值也会发生改变。所以不符合常量池设计的初衷。

 2. 线程安全考虑。 同一个字符串实例可以被多个线程共享。这样便不用因为线程安全问题而使用同步。字符串自己便是线程安全的。

 3. 类加载器要用到字符串，不可变性提供了安全性，以便正确的类被加载。譬如你想加载java.sql.Connection类，而这个值被改成了myhacked.Connection，那么会对你的数据库造成不可知的破坏。

 4. 支持hash映射和缓存。 因为字符串是不可变的，所以在它创建的时候hashcode就被缓存了，不需要重新计算。这就使得字符串很适合作为Map中的键，字符串的处理速度要快过其它的键对象。这就是HashMap中的键往往都使用字符串。

 缺点：

 如果有对String对象值改变的需求，那么会创建大量的String对象。</code></pre>
</li>
<li><p>String对象的是否真的不可变</p>
<pre><code> 虽然String对象将value设置为final,并且还通过各种机制保证其成员变量不可改变。但是还是可以通过反射机制的手段改变其值。例如：

  //创建字符串&quot;Hello World&quot;， 并赋给引用s
   String s = &quot;Hello World&quot;; 
   System.out.println(&quot;s = &quot; + s);    //Hello World

   //获取String类中的value字段
   Field valueFieldOfString = String.class.getDeclaredField(&quot;value&quot;);
   //改变value属性的访问权限
   valueFieldOfString.setAccessible(true);

   //获取s对象上的value属性的值
   char[] value = (char[]) valueFieldOfString.get(s);
   //改变value所引用的数组中的第5个字符
   value[5] = &#39;_&#39;;
   System.out.println(&quot;s = &quot; + s);  //Hello_World</code></pre>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>gitter 和 setter</title>
    <url>/myblog/2020/12/12/getter%E5%92%8Csetter%E7%9A%84boolean/</url>
    <content><![CDATA[<h1 id="getter-和-setter-Boolean问题"><a href="#getter-和-setter-Boolean问题" class="headerlink" title="getter 和 setter Boolean问题"></a>getter 和 setter Boolean问题</h1><p>JavaBean规范：如果一个属性是boolean值，假设名为property，则其setter方法应该是setProperty，其getter方法应该为isProperty</p>
 <a id="more"></a> 

<p>直接使用注解对<code>is</code>开头的boolean 类型时不能正确获取getter 和 setter 方法的，可以手动修改，或者修改变量名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ndp.fb.rdb.model;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> classGetterSetterTester&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> busy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isComplete;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Boolean verify;</span><br><span class="line">    <span class="keyword">private</span> Boolean isFinish;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">staticvoidmain</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        GetterSetterTester t = getterSetter();</span><br><span class="line">        testJson(t);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> GetterSetterTester <span class="title">getterSetter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        GetterSetterTester t = <span class="keyword">new</span> GetterSetterTester();</span><br><span class="line">        <span class="comment">//基本类型：无论带不带is，都是isXxx,setXxx。   sun的标准，需要特殊注意</span></span><br><span class="line">        t.isBusy();</span><br><span class="line">        t.setBusy(<span class="keyword">true</span>);</span><br><span class="line">        t.isComplete();</span><br><span class="line">        t.setComplete(<span class="keyword">true</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//包装类型:和其他类型一样，getXxx,setXxx;(其他类型的isXxx也是 getIsXxx,setIsXxx,不算特例).</span></span><br><span class="line">        t.getVerify();</span><br><span class="line">        t.setVerify(<span class="keyword">true</span>);</span><br><span class="line">        t.getIsFinish();</span><br><span class="line">        t.setIsFinish(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    privatestaticvoidtestJson(GetterSetterTester t)&#123;</span><br><span class="line">        <span class="comment">//期望的json格式</span></span><br><span class="line">        String json = <span class="string">&quot;&#123;\&quot;busy\&quot;:true,\&quot;isComplete\&quot;:true,\&quot;isFinish\&quot;:true,\&quot;verify\&quot;:true&#125;&quot;</span>;</span><br><span class="line">        GetterSetterTester p = JSON.parseObject(json, GetterSetterTester.class);</span><br><span class="line">        System.out.println(p.isBusy());</span><br><span class="line">        System.out.println(p.isComplete());  <span class="comment">//false</span></span><br><span class="line">        System.out.println(p.getVerify());</span><br><span class="line">        System.out.println(p.getIsFinish());</span><br><span class="line">        <span class="comment">//实际的json格式，可成功反序列化成对象。</span></span><br><span class="line">        <span class="comment">//基本类型变量无论是否有is，json都没有is（与getter一致）。</span></span><br><span class="line">        System.out.println(t.toString());<span class="comment">//&#123;&quot;busy&quot;:true,&quot;complete&quot;:true,&quot;isFinish&quot;:true,&quot;verify&quot;:true&#125;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">//空对象时的json，基本类型默认是false，会输出；包装类型默认是null，不输出。</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> GetterSetterTester().toString());<span class="comment">//&#123;&quot;busy&quot;:false,&quot;complete&quot;:false&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo01.qianji.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wushutong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/10 18:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BooleanTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isB;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Boolean c;</span><br><span class="line">    <span class="keyword">private</span> Boolean isD;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setA</span><span class="params">(<span class="keyword">boolean</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setB</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">        isB = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setC</span><span class="params">(Boolean c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setD</span><span class="params">(Boolean d)</span> </span>&#123;</span><br><span class="line">        isD = d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Swagger</title>
    <url>/myblog/2020/12/12/Swagger/</url>
    <content><![CDATA[<h1 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h1><p>Swagger 是最流行的 API 开发工具，它遵循 OpenAPI Specification（OpenAPI 规范，也简称 OAS）。<br>Swagger 可以贯穿于整个 API 生态，如 API 的设计、编写 API 文档、测试和部署。<br>Swagger 是一种通用的，和编程语言无关的 API 描述规范。</p>
 <a id="more"></a> 

<p>应用场景</p>
<ol>
<li><p> 如果你的 RESTful API 接口都开发完成了，你可以用 Swagger-editor 来编写 API 文档（ yaml 文件 或 json 文件），然后通过 Swagger-ui 来渲染该文件，以非常美观的形式将你的 API 文档，展现给你的团队或者客户。</p>
</li>
<li><p>如果你的 RESTful API 还未开始，也可以使用 Swagger ，来设计和规范你的 API，以 Annotation （注解）的方式给你的源代码添加额外的数据。这样，Swagger 就可以检测到这些数据，自动生成对应的 API 文档。</p>
<p>Swagger 规范本身是与编程语言无关的，它支持两种语法风格：</p>
<p> YAML 语法<br> JSON 语法</p>
</li>
</ol>
<p>【springboot集成swagger-ui自动生成API文档】<br>1.添加依赖</p>
<pre><code>      &lt;dependency&gt;
        &lt;groupId&gt;io.springfox&lt;/groupId&gt;
        &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;
        &lt;version&gt;2.2.2&lt;/version&gt;
      &lt;/dependency&gt;

      &lt;dependency&gt;
          &lt;groupId&gt;io.springfox&lt;/groupId&gt;
          &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;
          &lt;version&gt;2.2.2&lt;/version&gt;
      &lt;/dependency&gt;</code></pre>
<p>2.编写配置文件<br>在application同级目录新建swagger2文件，添加swagger2配置类</p>
<pre><code>    package com.abel.example;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import springfox.documentation.builders.ApiInfoBuilder;
    import springfox.documentation.builders.PathSelectors;
    import springfox.documentation.builders.RequestHandlerSelectors;
    import springfox.documentation.service.ApiInfo;
    import springfox.documentation.spi.DocumentationType;
    import springfox.documentation.spring.web.plugins.Docket;
    import springfox.documentation.swagger2.annotations.EnableSwagger2;

    @Configuration
    @EnableSwagger2
    public class Swagger2 &#123;
        /**
         * 创建API应用
         * apiInfo() 增加API相关信息
         * 通过select()函数返回一个ApiSelectorBuilder实例,用来控制哪些接口暴露给Swagger来展现，
         * 本例采用指定扫描的包路径来定义指定要建立API的目录。
         *
         * @return
         */
        @Bean
        public Docket createRestApi() &#123;
            return new Docket(DocumentationType.SWAGGER_2)
                    .apiInfo(apiInfo())
                    .select()
                    //加了ApiOperation注解的类，才生成接口文档
                    //.apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))
                    //包下的类，才生成接口文档
                    .apis(RequestHandlerSelectors.basePackage(&quot;com.qianji.controller&quot;))
                    .paths(PathSelectors.any())
                    .build()
                    .directModelSubstitute(java.util.Date.class, String.class)
                    .securitySchemes(security());
        &#125;

        /**
         * 创建该API的基本信息（这些基本信息会展现在文档页面中）
         * 访问地址：http://项目实际地址/swagger-ui.html
         * @return
         */
        private ApiInfo apiInfo() &#123;
            return new ApiInfoBuilder()
                    .title(&quot;Spring Boot中使用Swagger2构建RESTful APIs&quot;)
                    .description(&quot;更多请关注https://blog.csdn.net/u012373815&quot;)
                    .termsOfServiceUrl(&quot;https://blog.csdn.net/u012373815&quot;)
                    .contact(&quot;abel&quot;)
                    .version(&quot;1.0&quot;)
                    .build();
        &#125;
    &#125;</code></pre>
<p>3.在controller上添加注解，自动生成API</p>
<pre><code>    package com.abel.example.controller;
    import javax.servlet.http.HttpServletRequest;
    import java.util.Map;
    import com.abel.example.bean.User;
    import io.swagger.annotations.*;
    import org.apache.log4j.Logger;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.*;
    import com.abel.example.service.UserService;
    import com.abel.example.util.CommonUtil;

    @Controller
    @RequestMapping(value = &quot;/users&quot;)
    @Api(value = &quot;用户的增删改查&quot;)
    public class UserController &#123;

        @Autowired
        private UserService userService;


        /**
         * 查询所有的用户
         * api :localhost:8099/users
         * @return
         */
        @RequestMapping(method = RequestMethod.GET)
        @ResponseBody
        @ApiOperation(value = &quot;获取用户列表，目前没有分页&quot;)
        public ResponseEntity&lt;Object&gt; findAll() &#123;
            return new ResponseEntity&lt;&gt;(userService.listUsers(), HttpStatus.OK);
        &#125;

        /**
         * 通过id 查找用户
         * api :localhost:8099/users/1
         * @param id
         * @return
         */
        @RequestMapping(value = &quot;/&#123;id&#125;&quot;, method = RequestMethod.GET)
        @ResponseBody
        @ApiOperation(value = &quot;通过id获取用户信息&quot;, notes=&quot;返回用户信息&quot;)
        public ResponseEntity&lt;Object&gt; getUserById(@PathVariable Integer id) &#123;
            return new ResponseEntity&lt;&gt;(userService.getUserById(Long.valueOf(id)), HttpStatus.OK);
        &#125;


        /**
         * 通过spring data jpa 调用方法
         * api :localhost:8099/users/byname?username=xxx
         * 通过用户名查找用户
         * @param request
         * @return
         */
        @RequestMapping(value = &quot;/byname&quot;, method = RequestMethod.GET)
        @ResponseBody
        @ApiImplicitParam(paramType = &quot;query&quot;,name= &quot;username&quot; ,value = &quot;用户名&quot;,dataType = &quot;string&quot;)
        @ApiOperation(value = &quot;通过用户名获取用户信息&quot;, notes=&quot;返回用户信息&quot;)
        public ResponseEntity&lt;Object&gt; getUserByUserName(HttpServletRequest request) &#123;
            Map&lt;String, Object&gt; map = CommonUtil.getParameterMap(request);
            String username = (String) map.get(&quot;username&quot;);
            return new ResponseEntity&lt;&gt;(userService.getUserByUserName(username), HttpStatus.OK);
        &#125;

        /**
         * 通过spring data jpa 调用方法
         * api :localhost:8099/users/byUserNameContain?username=xxx
         * 通过用户名模糊查询
         * @param request
         * @return
         */
        @RequestMapping(value = &quot;/byUserNameContain&quot;, method = RequestMethod.GET)
        @ResponseBody
        @ApiImplicitParam(paramType = &quot;query&quot;,name= &quot;username&quot; ,value = &quot;用户名&quot;,dataType = &quot;string&quot;)
        @ApiOperation(value = &quot;通过用户名模糊搜索用户信息&quot;, notes=&quot;返回用户信息&quot;)
        public ResponseEntity&lt;Object&gt; getUsers(HttpServletRequest request) &#123;
            Map&lt;String, Object&gt; map = CommonUtil.getParameterMap(request);
            String username = (String) map.get(&quot;username&quot;);
            return new ResponseEntity&lt;&gt;(userService.getByUsernameContaining(username), HttpStatus.OK);
        &#125;


        /**
         * 添加用户啊
         * api :localhost:8099/users
         *
         * @param user
         * @return
         */
        @RequestMapping(method = RequestMethod.POST)
        @ResponseBody
        @ApiModelProperty(value=&quot;user&quot;,notes = &quot;用户信息的json串&quot;)
        @ApiOperation(value = &quot;新增用户&quot;, notes=&quot;返回新增的用户信息&quot;)
        public ResponseEntity&lt;Object&gt; saveUser(@RequestBody User user) &#123;
            return new ResponseEntity&lt;&gt;(userService.saveUser(user), HttpStatus.OK);
        &#125;

        /**
         * 修改用户信息
         * api :localhost:8099/users
         * @param user
         * @return
         */
        @RequestMapping(method = RequestMethod.PUT)
        @ResponseBody
        @ApiModelProperty(value=&quot;user&quot;,notes = &quot;修改后用户信息的json串&quot;)
        @ApiOperation(value = &quot;新增用户&quot;, notes=&quot;返回新增的用户信息&quot;)
        public ResponseEntity&lt;Object&gt; updateUser(@RequestBody User user) &#123;
            return new ResponseEntity&lt;&gt;(userService.updateUser(user), HttpStatus.OK);
        &#125;

        /**
         * 通过ID删除用户
         * api :localhost:8099/users/2
         * @param id
         * @return
         */
        @RequestMapping(value = &quot;/&#123;id&#125;&quot;, method = RequestMethod.DELETE)
        @ResponseBody
        @ApiOperation(value = &quot;通过id删除用户信息&quot;, notes=&quot;返回删除状态1 成功 0 失败&quot;)
        public ResponseEntity&lt;Object&gt; deleteUser(@PathVariable Integer id) &#123;
            return new ResponseEntity&lt;&gt;(userService.removeUser(id.longValue()), HttpStatus.OK);
        &#125;
    &#125;</code></pre>
<p>4.下载Swagger UI组件<br>去官网下载Zip包，或者在github上下载也可以，需要将dist文件夹下的所有文件的复制到webapp目录下<br>原理就是在系统加载的时候，Swagger配置类去扫描所有添加注释的接口，并且储存起来通过下面地址进行访问，返回JSON数据，在前端界面显示出来。<br>启动项目后，访问<a href="http://localhost:8099/swagger-ui.html%EF%BC%8C%E6%98%BE%E7%A4%BA%E5%A6%82%E4%B8%8B">http://localhost:8099/swagger-ui.html，显示如下</a></p>
<p>注解说明</p>
<p>@Api：用在类上，说明该类的作用。<br>@ApiOperation：注解来给API增加方法说明。<br>@ApiImplicitParams : 用在方法上包含一组参数说明。<br>@ApiImplicitParam：用来注解来给方法入参增加说明。<br>@ApiResponses：用于表示一组响应<br>@ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息<br>@ApiModel：描述一个Model的信息（一般用在请求参数无法使用@ApiImplicitParam注解进行描述的时候）<br>@ApiModelProperty：描述一个model的属性<br>其中<br>@ApiResponse参数：</p>
<p>code：数字，如400<br>message：信息，如“参数填写错误”<br>response：抛出异常的类<br>@ApiImplicitParam参数：<br>paramTpye：指定参数放在哪些地方（header/query/path/body/form）<br>name：参数名<br>dataTpye：参数类型<br>required：是否必输（true/false）<br>value：说明参数的意思<br>defaultValue：参数默认值</p>
<p>​    </p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/myblog/2021/01/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
 <a id="more"></a> 

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo</title>
    <url>/myblog/2020/12/12/hexo/</url>
    <content><![CDATA[<h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
 <a id="more"></a> 

<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h6 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h6><ul>
<li>Git</li>
<li>Node.js( 12.0+版本)</li>
</ul>
<h6 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h6><ol>
<li>初次安装</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>对于熟悉 npm 的进阶用户，可以仅局部安装 <code>hexo</code> 包。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>配置环境变量</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">C:\Program Files\nodejs\node_global\node_modules\hexo\bin</span><br></pre></td></tr></table></figure>

<ol>
<li><code>npx hexo &lt;command&gt;</code></li>
<li>将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用 <code>hexo &lt;command&gt;</code>：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27; &gt;&gt; ~/.profile</span><br></pre></td></tr></table></figure>

<h4 id="建博客"><a href="#建博客" class="headerlink" title="建博客"></a>建博客</h4><h5 id="1、初始化"><a href="#1、初始化" class="headerlink" title="1、初始化"></a>1、初始化</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 初始化</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入指定文件夹</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> npm</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure>

<h5 id="2、-建好目录"><a href="#2、-建好目录" class="headerlink" title="2、 建好目录"></a>2、 建好目录</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── .gitignore</span><br><span class="line">├── node_modules</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<ul>
<li>_config.yml ：配置大部分的参数</li>
<li>package.json：应用程序的信息。<a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> renderer 已默认安装，您可以自由移除。</li>
<li>scaffolds：模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件</li>
<li>source：资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</li>
<li>themes：主题文件夹。Hexo 会根据主题来生成静态页面。</li>
</ul>
<h5 id="3、编译，启动服务"><a href="#3、编译，启动服务" class="headerlink" title="3、编译，启动服务"></a>3、编译，启动服务</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo generate</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo server</span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br><span class="line">INFO  Catch you later</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> http://localhost:4000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>









<h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><h6 id="hexo-init"><a href="#hexo-init" class="headerlink" title="hexo init"></a>hexo init</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init [folder]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这一步Git克隆hexo-starter 到指定的文件夹（慢死）</span></span><br></pre></td></tr></table></figure>

<h6 id="hexo-new"><a href="#hexo-new" class="headerlink" title="hexo new"></a>hexo new</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo new <span class="string">&quot;post title with whitespace&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo new [layout] &lt;title&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</span></span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -p, --path     自定义新文章的路径</span><br><span class="line">  -r, --replace  如果存在同名文章，将其替换</span><br><span class="line">  -s, --slug     文章的 Slug，作为新文章的文件名和发布后的 URL</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="hexo-generate"><a href="#hexo-generate" class="headerlink" title="hexo generate"></a>hexo generate</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成静态文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo generate</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 简写</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g</span></span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -b, --bail         生成过程中如果发生任何未处理的异常则抛出异常</span><br><span class="line">  -c, --concurrency  最大同时生成文件的数量，默认无限制</span><br><span class="line">  -d, --deploy       文件生成后立即部署网站</span><br><span class="line">  -f, --force        强制重新生成文件</span><br><span class="line">Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。</span><br><span class="line">使用该参数的效果接近 hexo clean &amp;&amp; hexo generate</span><br><span class="line">  -w, --watch        监视文件变动</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="hexo-publish"><a href="#hexo-publish" class="headerlink" title="hexo publish"></a>hexo publish</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 发布草稿</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo publish [layout] &lt;filename&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="hexo-server"><a href="#hexo-server" class="headerlink" title="hexo server"></a>hexo server</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动服务器，默认情况下，访问网址为： http://localhost:4000/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo server</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -i, --ip            Override the default server IP. Bind to all IP address by default.</span><br><span class="line">  -l, --log [format]  启动日记记录，使用覆盖记录格式</span><br><span class="line">  -o, --open          Immediately open the server url in your default web browser.</span><br><span class="line">  -p, --port          重设端口</span><br><span class="line">  -s, --static        只使用静态文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="hexo-deploy"><a href="#hexo-deploy" class="headerlink" title="hexo deploy"></a>hexo deploy</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 部署网站。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 简写</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d</span></span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --setup         Setup without deployment</span><br><span class="line">  -g, --generate  部署之前预先生成静态文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="hexo-render"><a href="#hexo-render" class="headerlink" title="hexo render"></a>hexo render</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 渲染文件。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo render &lt;file1&gt; [file2] ...</span></span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line">Render files with renderer plugins (e.g. Markdown) and save them at the specified path.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --engine  Specify render engine</span><br><span class="line">  --output  	设置输出路径</span><br><span class="line">  --pretty  Prettify JSON output</span><br></pre></td></tr></table></figure>

<h6 id="hexo-migrate"><a href="#hexo-migrate" class="headerlink" title="hexo migrate"></a>hexo migrate</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从其他博客系统 迁移内容。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo migrate &lt;<span class="built_in">type</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a>hexo clean</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo clean</span></span><br></pre></td></tr></table></figure>

<h6 id="hexo-list"><a href="#hexo-list" class="headerlink" title="hexo list"></a>hexo list</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出网站资料。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo list &lt;<span class="built_in">type</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h4><h6 id="1-创建github用户"><a href="#1-创建github用户" class="headerlink" title="1. 创建github用户"></a>1. 创建github用户</h6><h6 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2. 创建仓库"></a>2. 创建仓库</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">名称只能为：用户名.github.io</span><br><span class="line"></span><br><span class="line">例如 wushutong.github.io</span><br></pre></td></tr></table></figure>

<h6 id="3-本地生成git-的-ssh-key-并安装到github"><a href="#3-本地生成git-的-ssh-key-并安装到github" class="headerlink" title="3. 本地生成git 的 ssh key 并安装到github"></a>3. 本地生成git 的 ssh key 并安装到github</h6><h6 id="4-在git-Bash-执行"><a href="#4-在git-Bash-执行" class="headerlink" title="4. 在git Bash 执行"></a>4. 在git Bash 执行</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装部署插件</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="5-修改改-config-yml文件"><a href="#5-修改改-config-yml文件" class="headerlink" title="5.修改改_config.yml文件"></a>5.修改改_config.yml文件</h6><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:wushutong/wushutong.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<h6 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean（清除缓存）</span><br><span class="line">hexo g（上传到仓库）</span><br><span class="line">hexo d（部署）</span><br></pre></td></tr></table></figure>

<h4 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h4><h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><p><a href="https://hexo.io/themes/">HEXO主题选择地址</a></p>
<p><a href="http://theme-next.iissnan.com/getting-started.html">next主题使用说明</a></p>
<h6 id="1-将主题文件放到themes目录下"><a href="#1-将主题文件放到themes目录下" class="headerlink" title="1.将主题文件放到themes目录下"></a>1.将主题文件放到<code>themes</code>目录下</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 方式1.  git 直接拉取next 主题方式</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方式2. 手动 github 下载之后放在themes/next</span></span><br></pre></td></tr></table></figure>

<h6 id="2-在hexo-config-yml中修改使用的主题"><a href="#2-在hexo-config-yml中修改使用的主题" class="headerlink" title="2.在hexo/_config.yml中修改使用的主题"></a>2.在<code>hexo/_config.yml</code>中修改使用的主题</h6><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo/_config.yml (修改使用的主题，指定为theme/next)</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<h6 id="3-添加主题备用配置文件"><a href="#3-添加主题备用配置文件" class="headerlink" title="3.添加主题备用配置文件"></a>3.添加主题备用配置文件</h6><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将主题的配置文件hexo/themes/next/_config.yml 复制到主目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更名为 hexo/_config.next.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有当配置了 theme: next，并且 备用配置文件名为 _config.next.yml 才可以被加载</span></span><br></pre></td></tr></table></figure>

<h6 id="4-执行clean清除缓存"><a href="#4-执行clean清除缓存" class="headerlink" title="4.执行clean清除缓存"></a>4.执行clean清除缓存</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo clean</span></span><br></pre></td></tr></table></figure>





<h5 id="next-主题更多配置"><a href="#next-主题更多配置" class="headerlink" title="next 主题更多配置"></a>next 主题更多配置</h5><ul>
<li>配置多语言</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主配置文件 hexo/_config.yml （配置为支持中英文）</span></span><br><span class="line"><span class="attr">language:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">zh-CN</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">en</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题配置文件 hexo/_config.next.yml (配置语言切换)</span></span><br><span class="line"><span class="attr">language_switcher:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>升级</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入 next 主题文件夹</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> themes / next</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> pull</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull origin master</span></span><br></pre></td></tr></table></figure>

<ul>
<li></li>
</ul>
<h5 id="hexo-配置-config-yml"><a href="#hexo-配置-config-yml" class="headerlink" title="hexo 配置_config.yml"></a>hexo 配置_config.yml</h5><ul>
<li>作者</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo/_config.yml</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">wushutong</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>描述</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo/_config.yml</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">今天是个好日子</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Scheme 主题方案</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo/_config.next.yml</span></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse    	# 默认，很干净</span></span><br><span class="line"><span class="comment">#scheme: Mist		# 单列视图</span></span><br><span class="line"><span class="comment">#scheme: Pisces		# 双柱</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span>		<span class="comment"># 带阴影</span></span><br></pre></td></tr></table></figure>

<ul>
<li>网站图标</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认图标放置在 hexo/themes/next/source/images/ 下面</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo/_config.next.yml  （后面跟的是相对于主题主配置文件 hexo/themes/next/source 的位置）</span></span><br><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16-next.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32-next.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /manifest.json</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 生成图标网址，需要翻墙</span></span><br><span class="line"><span class="string">https://realfavicongenerator.net/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Custom Logo 徽标</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo/_config.next.yml (Scheme Mist 不支持)</span></span><br><span class="line"><span class="attr">custom_logo:</span> <span class="comment">#/uploads/custom-logo.jpg</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>侧边栏</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo/_config.next.yml</span></span><br><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="comment"># Sidebar Position. 	# 位置</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span> 		<span class="comment"># 左侧</span></span><br><span class="line">  <span class="comment">#position: right  	# 右侧</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Manual define the sidebar width. If commented, will be default for:</span></span><br><span class="line">  <span class="comment"># Muse | Mist: 320</span></span><br><span class="line">  <span class="comment"># Pisces | Gemini: 240</span></span><br><span class="line">  <span class="comment">#width: 300			# 宽度</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sidebar Display (only for Muse | Mist), available values:</span></span><br><span class="line">  <span class="comment">#  - post    expand on posts automatically. Default. 	具有索引的帖子显示侧边栏</span></span><br><span class="line">  <span class="comment">#  - always  expand for all pages automatically.		所有页面</span></span><br><span class="line">  <span class="comment">#  - hide    expand only when click on the sidebar toggle icon.	隐藏</span></span><br><span class="line">  <span class="comment">#  - remove  totally remove sidebar including sidebar toggle.		删除</span></span><br><span class="line">  <span class="attr">display:</span> <span class="string">post</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sidebar padding in pixels.		内边距</span></span><br><span class="line">  <span class="attr">padding:</span> <span class="number">18</span></span><br><span class="line">  <span class="comment"># Sidebar offset from top menubar in pixels (only for Pisces | Gemini). 偏移</span></span><br><span class="line">  <span class="attr">offset:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure>

<ul>
<li>头像</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo/_config.next.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># url 放置头像图片</span></span><br><span class="line">  <span class="comment"># 1. 如果图片放在了hexo/source/uploads/ 中，url： source/uploads/avatar.gif</span></span><br><span class="line">  <span class="comment"># 2. 如果图片放在了主题目录source/images/中，url: /images/avatar.gif</span></span><br><span class="line">  <span class="comment"># 3. 直接使用网络图片</span></span><br><span class="line">  <span class="attr">url:</span> <span class="comment">#/images/avatar.gif</span></span><br><span class="line">  <span class="comment"># 头像是否圆边</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 头像将在鼠标悬停时旋转。</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<ul>
<li>侧边栏帖子计数</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo/_config.next.yml</span></span><br><span class="line"><span class="attr">site_state:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>社交软件链接</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo/_config.next.yml</span></span><br><span class="line"><span class="comment"># 链接名: 链接网址 || 图标</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="comment">#GitHub: https://github.com/wushutong || fab fa-github</span></span><br><span class="line">  <span class="comment">#E-Mail: mailto:yourname@gmail.com || fa fa-envelope</span></span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || fab fa-weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || fab fa-google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br></pre></td></tr></table></figure>

<ul>
<li>社交图标效果</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo/_config.next.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">false</span>	<span class="comment">#只显示图标</span></span><br><span class="line">  <span class="attr">transition:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<ul>
<li>侧边栏目录</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo/_config.next.yml</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>	<span class="comment"># 目录可用</span></span><br><span class="line">  <span class="comment"># 为目录添加编号</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 帖子标题过长</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否显示所有级别目录</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 目录深度</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>

<ul>
<li>添加自己喜欢的链接</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo/_config.next.yml</span></span><br><span class="line"><span class="comment"># 名称： 链接</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="comment">#Title: https://example.com</span></span><br></pre></td></tr></table></figure>

<ul>
<li>喜欢的链接样式控制</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo/_config.next.yml</span></span><br><span class="line"><span class="attr">links_settings:</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-globe</span>		<span class="comment"># 图标</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Links</span>			<span class="comment"># 名称</span></span><br><span class="line">  <span class="comment"># Available values: block | inline</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">block</span>			<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<ul>
<li>页脚</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo/_config.next.yml</span></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># 默认显示当前年，如果有 since 2019，效果为 2019 - 2020 </span></span><br><span class="line">  <span class="comment">#since: 2020</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 年和作者中间的图标.</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="comment"># Icon name in Font Awesome. See: https://fontawesome.com/icons</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">fa</span> <span class="string">fa-heart</span></span><br><span class="line">    <span class="comment"># 图标动画.</span></span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Change the color of icon, using Hex Code.</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">&quot;#ff0000&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not defined, `author` from Hexo `_config.yml` will be used. 版权</span></span><br><span class="line">  <span class="attr">copyright:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Powered by Hexo &amp; NexT 网站平台信息，Powered by Hexo &amp; NexT</span></span><br><span class="line">  <span class="attr">powered:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Beian ICP and gongan information for Chinese users. See: https://beian.miit.gov.cn, http://www.beian.gov.cn 网址备案信息</span></span><br><span class="line">  <span class="attr">beian:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">icp:</span></span><br><span class="line">    <span class="comment"># The digit in the num of gongan beian.</span></span><br><span class="line">    <span class="attr">gongan_id:</span></span><br><span class="line">    <span class="comment"># The full num of gongan beian.</span></span><br><span class="line">    <span class="attr">gongan_num:</span></span><br><span class="line">    <span class="comment"># The icon for gongan beian. See: http://www.beian.gov.cn/portal/download</span></span><br><span class="line">    <span class="attr">gongan_icon_url:</span></span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>java基础</title>
    <url>/myblog/2020/12/12/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>[toc]</p>
<h3 id="类class"><a href="#类class" class="headerlink" title="类class"></a>类class</h3><h4 id="1-类与对象"><a href="#1-类与对象" class="headerlink" title="1.类与对象"></a>1.类与对象</h4><p>用来创建对象</p>
<h5 id="1-class-类-的结构"><a href="#1-class-类-的结构" class="headerlink" title="1.class 类 的结构"></a>1.class 类 的结构</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 包名</span></span><br><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入的其他类</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;hello&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="comment">// 权限修饰符+class+类名</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello!!!!!!!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

 <a id="more"></a> 

<h5 id="2-类体中的内容"><a href="#2-类体中的内容" class="headerlink" title="2.类体中的内容"></a>2.类体中的内容</h5><ul>
<li>成员属性（类的属性）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>

<ul>
<li>成员方法（类的功能方法）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;姓名&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>构造方法(创建对象时执行)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 空参构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带参构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-Java程序执行–方法执行"><a href="#3-Java程序执行–方法执行" class="headerlink" title="3.Java程序执行–方法执行"></a>3.Java程序执行–方法执行</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	User user = <span class="keyword">new</span> User();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>main 方法入栈，然后依次执行main方法中的内容</li>
<li>创建对象，对象储存在堆内存中，user 指向对象的对内存地址</li>
<li></li>
</ol>
<h4 id="2-继承extends"><a href="#2-继承extends" class="headerlink" title="2.继承extends"></a>2.继承extends</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>子类继承父类，同时继承父类的成员变量和成员方法，不会继承父类构造方法</p>
<h5 id="1-子类对象与父类对象的创建"><a href="#1-子类对象与父类对象的创建" class="headerlink" title="1. 子类对象与父类对象的创建"></a>1. 子类对象与父类对象的创建</h5><p>创建子类对象的时候先执行了父类的构造方法，创建了父类对象。（子类构造方法中默认会调用父类无参构造）</p>
<p>在操作子类对象时，子类有的成员变量和方法直接使用，假如子类中找不到，查找继承父类的成员属性和方法</p>
<h5 id="2-子类继承父类的私有成员属性和方法，但是不能访问（private）"><a href="#2-子类继承父类的私有成员属性和方法，但是不能访问（private）" class="headerlink" title="2.子类继承父类的私有成员属性和方法，但是不能访问（private）"></a>2.子类继承父类的私有成员属性和方法，但是不能访问（private）</h5><h5 id="3-子类重写父类方法"><a href="#3-子类重写父类方法" class="headerlink" title="3.子类重写父类方法"></a>3.子类重写父类方法</h5><p>子类继承父类的方法，也可以重写父类的方法</p>
<p>方法的重写：指的是方法名，返回值，参数一致</p>
<p>子类重写父类方法时，子类方法的访问权限修饰符权限<code>&gt;=</code>父类方法的访问权限修饰符权限</p>
<h5 id="4-注解-override"><a href="#4-注解-override" class="headerlink" title="4.注解 @override"></a>4.注解 <code>@override</code></h5><p>表明这是一个重写方法</p>
<h5 id="5-this关键字"><a href="#5-this关键字" class="headerlink" title="5.this关键字"></a>5.this关键字</h5><ul>
<li>this 关键字可以直接在类中访问本类的成员属性，成员方法，构造方法</li>
<li><code>this();</code>放在有参构造的第一行会先调用本类的无参构造</li>
<li><code>this(&quot;name&quot;);</code>放在构造方法第一行会先执行本类的指定有参构造</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 这个构造方法调用了无参构造</span></span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="6-super-关键字"><a href="#6-super-关键字" class="headerlink" title="6.super 关键字"></a>6.super 关键字</h5><ul>
<li>super 关键字访问父类的成员属性，成员方法，构造方法</li>
<li>子类所有构造方法第一行默认添加了<code>super();</code></li>
</ul>
<h5 id="7-this-与-super-假如此类找不到会去他的父类寻找（穿透性）"><a href="#7-this-与-super-假如此类找不到会去他的父类寻找（穿透性）" class="headerlink" title="7.this 与 super 假如此类找不到会去他的父类寻找（穿透性）"></a>7.this 与 super 假如此类找不到会去他的父类寻找（穿透性）</h5><p>例如所有的类都继承了<code>Object</code>类，都可以使用<code>this.</code>调用<code>Object</code>类的方法</p>
<h5 id="8-支持多级继承，只支持单继承"><a href="#8-支持多级继承，只支持单继承" class="headerlink" title="8.支持多级继承，只支持单继承"></a>8.支持多级继承，只支持单继承</h5><h4 id="3-抽象类"><a href="#3-抽象类" class="headerlink" title="3.抽象类"></a>3.抽象类</h4><ul>
<li>不能new 对象</li>
<li>可以被其他类继承</li>
<li>被<code>abstract</code>修饰得类</li>
<li>其中可以定义抽象方法</li>
<li>具有构造方法（子类创建对象时调用，开辟内存空间）</li>
<li>抽象类中的抽象方法必须被子类重写</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 抽象方法，不能有方法体，也就是大括号</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-接口"><a href="#4-接口" class="headerlink" title="4.接口"></a>4.接口</h4><ul>
<li><p>接口比抽象类更加抽象</p>
</li>
<li><p>接口可以多实现</p>
</li>
<li><p>接口可以多继承其他接口</p>
</li>
<li><p><code>implements</code></p>
</li>
<li><p> 接口默认方法<code>default</code>关键字不可以省略</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 接口中所有变量都是常量，#默认添加了 public static final 修饰</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 普通方法都是抽象方法 #默认被 public abstract 修饰</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getUserName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 默认方法有方法体，default不可以省略，被子类继承时可以重写，也可以不重写 #默认 public 修饰</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> String <span class="title">getUserAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 静态方法有方法体，只属于接口本身，不能被继承和重写 #默认 public 修饰</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getAddress</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="1-子类多实现接口，接口的属性或者抽象方法重复（实现类实现接口）"><a href="#1-子类多实现接口，接口的属性或者抽象方法重复（实现类实现接口）" class="headerlink" title="1.子类多实现接口，接口的属性或者抽象方法重复（实现类实现接口）"></a>1.子类多实现接口，接口的属性或者抽象方法重复（实现类实现接口）</h6><p>1.常量冲突，子类不会继承此常量（接口的变量都是fianl 修饰）</p>
<p>2.抽象方法冲突，子类直接重写即可</p>
<p>3.默认方法冲突，必须重写</p>
<p>4.静态方法冲突，静态方法属于本类，冲突无影响</p>
<h6 id="2-接口间多继承关系，父接口的属性或者抽象方法重复（接口多继承接口）"><a href="#2-接口间多继承关系，父接口的属性或者抽象方法重复（接口多继承接口）" class="headerlink" title="2.接口间多继承关系，父接口的属性或者抽象方法重复（接口多继承接口）"></a>2.接口间多继承关系，父接口的属性或者抽象方法重复（接口多继承接口）</h6><p>1.常量冲突，子类不会继承此常量</p>
<p>2.抽象方法冲突，冲突的抽象方法是一样的</p>
<p>3.默认方法冲突，重写方法</p>
<p>4.静态方法冲突。不影响</p>
<h6 id="3-实现类实现多个接口，同时继承一个抽象类，抽象类与接口冲突（）"><a href="#3-实现类实现多个接口，同时继承一个抽象类，抽象类与接口冲突（）" class="headerlink" title="3.实现类实现多个接口，同时继承一个抽象类，抽象类与接口冲突（）"></a>3.实现类实现多个接口，同时继承一个抽象类，抽象类与接口冲突（）</h6><p>1.常量冲突，子类不会继承接口常量，可以继承抽象类的属性。（没遇到过，待查找资料）</p>
<p>2.父类方法与接口方法一致时，子类继承父类方法</p>
<p>3.父类默认方法与接口默认方法一致，继承父类的方法</p>
<p>4.静态方法不能被继承</p>
<h4 id="5-多态"><a href="#5-多态" class="headerlink" title="5.多态"></a>5.多态</h4><p>父类的引用指向子类的对象</p>
<p>使用父类类型接受子类的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Map 接受 HashMap</span></span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(); </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建对象给对象赋值</span></span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 形参</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 返回值多态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Long&gt; <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Long&gt;();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>特点：</strong></p>
<ul>
<li>多态不会访问子类特有的属性和方法，因为对象时父类的对象，只能访问父类有的方法</li>
<li>父类与子类同名属性，访问的是父类属性</li>
<li>子类重写了父类的方法，则访问的是子类重写的方法</li>
</ul>
<h6 id="转型"><a href="#转型" class="headerlink" title="转型"></a>转型</h6><ol>
<li>向上转型</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List l = list;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>向下转型</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (list <span class="keyword">instanceof</span> ArrayList)&#123;</span><br><span class="line">    ArrayList l = (ArrayList) list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-内部类"><a href="#6-内部类" class="headerlink" title="6.内部类"></a>6.内部类</h4><ul>
<li>在类的内部定义的一个类</li>
<li>内部类编译也会生出class 文件</li>
</ul>
<h6 id="1-成员内部类"><a href="#1-成员内部类" class="headerlink" title="1. 成员内部类"></a>1. 成员内部类</h6><p>放在成员属性的位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 成员内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 方法中的a=1就近原则</span></span><br><span class="line">            System.out.println(a);</span><br><span class="line">            <span class="comment">// 内部类中的a=2</span></span><br><span class="line">            System.out.println(<span class="keyword">this</span>.a);</span><br><span class="line">            <span class="comment">// 外部类的a=3</span></span><br><span class="line">            System.out.println(User.<span class="keyword">this</span>.a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用内部类属性</span></span><br><span class="line">User.People p = <span class="keyword">new</span> User().<span class="function">new <span class="title">People</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br></pre></td></tr></table></figure>

<h6 id="2-局部内部类"><a href="#2-局部内部类" class="headerlink" title="2.局部内部类"></a>2.局部内部类</h6><p>放在局部属性的位置（方法中）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="comment">// 局部内部类访问外部类的属性，外部类属性将转为fianl 修饰的。</span></span><br><span class="line">                System.out.println(name);</span><br><span class="line">                <span class="comment">// 第二层</span></span><br><span class="line">                <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>局部内部类可以无限嵌套，因为这只是一个方法，不嫌累就可以一直写。</li>
<li>局部内部类访问外部类的属性，外部类属性将默认转为fianl 修饰的常量。此变量被fianl 修饰后值无法改变。（lambda 中 foreach 中外部类属性必须为fianl）</li>
</ul>
<h6 id="3-匿名内部类"><a href="#3-匿名内部类" class="headerlink" title="3.匿名内部类"></a>3.匿名内部类</h6><p>局部内部类的匿名子类对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. Thread 类</span></span><br><span class="line"><span class="keyword">new</span> Thread(Runnable run);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Runnable 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 直接简写Runnable 的实现类</span></span><br><span class="line"><span class="keyword">new</span> Thread(</span><br><span class="line">    <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="fianl关键字"><a href="#fianl关键字" class="headerlink" title="fianl关键字"></a>fianl关键字</h4><p>1.修饰类</p>
<p>修饰的类不能被继承，即不可修饰抽象类与接口</p>
<p>2.修饰成员方法</p>
<p>修饰的方法不能被重写，不能修饰抽象方法与接口方法</p>
<p>3.修饰成员变量</p>
<p>成员变量值不可变，不能被修改。fianl指定变量绑定内存地址，不可更改。</p>
<p>4.修饰局部变量</p>
<p>成员变量值不可变，不能被修改。fianl指定变量绑定内存地址，不可更改。</p>
<h4 id="static修饰符"><a href="#static修饰符" class="headerlink" title="static修饰符"></a>static修饰符</h4><p>1.修饰成员属性</p>
<p>此类的此成员属性在类加载时被加载到静态存储区，此类的所有对象共同使用此类存放在静态存储区的属性。</p>
<p>（静态存储区存在于方法区之中）</p>
<p>2.修饰成员方法</p>
<p>静态方法</p>
<p>3.静态代码块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    <span class="comment">// 多用于给静态成员赋值，在类加载的时候加载，只在类加载的时候执行一次</span></span><br><span class="line">    <span class="comment">// 多用于定义全局变量，做工具类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="访问权限修饰符"><a href="#访问权限修饰符" class="headerlink" title="访问权限修饰符"></a>访问权限修饰符</h4><table>
<thead>
<tr>
<th>修饰符</th>
<th>修饰类</th>
<th>成员变量</th>
<th>成员方法</th>
</tr>
</thead>
<tbody><tr>
<td>public</td>
<td>共有的（本项目所有包可以访问）</td>
<td>本项目都可以访问</td>
<td></td>
</tr>
<tr>
<td>default</td>
<td>默认的（同包以及本包的子包）</td>
<td>同一包下都可以访问</td>
<td></td>
</tr>
<tr>
<td>protected</td>
<td></td>
<td>可以被继承</td>
<td></td>
</tr>
<tr>
<td>private</td>
<td></td>
<td>只在本类</td>
<td></td>
</tr>
</tbody></table>
<h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><h6 id="1-构造代码块"><a href="#1-构造代码块" class="headerlink" title="1.构造代码块"></a>1.构造代码块</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造方法的位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;g构造代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    People()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造代码块先于构造方法执行</p>
<h6 id="2-局部代码块"><a href="#2-局部代码块" class="headerlink" title="2.局部代码块"></a>2.局部代码块</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 静态成员属性的位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类加载的时候执行，一般用于给静态属性赋值</p>
<h6 id="3-静态代码块"><a href="#3-静态代码块" class="headerlink" title="3.静态代码块"></a>3.静态代码块</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 局部变量的位置，方法中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;局部代码块&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>局部代码块执行结束后，直接被垃圾回收。</p>
]]></content>
  </entry>
  <entry>
    <title>基础 CLASS</title>
    <url>/myblog/2020/12/12/%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="基础-CLASS"><a href="#基础-CLASS" class="headerlink" title="基础 CLASS"></a>基础 CLASS</h1><p>[toc]</p>
<h3 id="一、Object"><a href="#一、Object" class="headerlink" title="一、Object"></a>一、Object</h3><p>  <strong>java.lang.Object</strong></p>
<p><code>Object</code> 是类层次结构的根类。每个类都使用 <code>Object</code>  作为超类。所有对象（包括数组）都实现这个类的方法。 </p>
<h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><h6 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h6> <a id="more"></a> 

<ul>
<li><p>Object 类的 toString 方法返回一个字符串</p>
</li>
<li><p>返回值：<code>getClass().getName() + &#39;@&#39; + Integer.toHexString(hashCode())</code></p>
</li>
<li><p>类的完全限定名（src之下的所有级别）+@ + 此对象哈希码的无符号十六进制表示</p>
</li>
<li><p>建议重写此方法</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<h6 id="notify"><a href="#notify" class="headerlink" title="notify"></a>notify</h6><ul>
<li>随机唤醒在此对象上等待的线程</li>
<li></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<h6 id="notifyAll"><a href="#notifyAll" class="headerlink" title="notifyAll"></a>notifyAll</h6><ul>
<li>唤醒在此对象监视器上等待的所有线程</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<h6 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h6><ul>
<li>timeout - 要等待的最长时间（以毫秒为单位）。</li>
<li>线程等待指定时长</li>
<li>如果为0则只能等待notify或者notifyAll唤醒</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span></span><br></pre></td></tr></table></figure>

<h6 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h6><ul>
<li>当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。进行内存释放。</li>
<li></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span></span></span><br><span class="line"><span class="function">                 <span class="keyword">throws</span> Throwable</span></span><br></pre></td></tr></table></figure>

<h6 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h6><ul>
<li>返回该对象的哈希码值。支持此方法是为了提高哈希表（例如 java.util.Hashtable 提供的哈希表）的性能。</li>
<li>在 Java 应用程序执行期间，在对同一对象多次调用 hashCode 方法时，必须一致地返回相同的整数</li>
<li>如果根据 equals(java.lang.Object) 方法，两个对象不相等，那么对这两个对象中的任一对象上调用 hashCode 方法不 要求一定生成不同的整数结果</li>
<li>如果根据 equals(Object) 方法，两个对象是相等的，那么对这两个对象中的每个对象调用 hashCode 方法都必须生成相同的整数结果。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<h6 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h6><ul>
<li>自反性：对于任何非空引用值 x，x.equals(x) 都应返回 true。 </li>
<li>对称性：对于任何非空引用值 x 和 y，当且仅当 y.equals(x) 返回 true 时，x.equals(y) 才应返回 true。 </li>
<li>传递性：对于任何非空引用值 x、y 和 z，如果 x.equals(y) 返回 true，并且 y.equals(z) 返回 true，那么 x.equals(z) 应返回 true。 </li>
<li>一致性：对于任何非空引用值 x 和 y，多次调用 x.equals(y) 始终返回 true 或始终返回 false</li>
<li>对于任何非空引用值 x，x.equals(null) 都应返回 false。</li>
<li>默认的equals 方法比较的是内存地址</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span></span><br></pre></td></tr></table></figure>



<h3 id="二、Objects"><a href="#二、Objects" class="headerlink" title="二、Objects"></a>二、Objects</h3><p><strong>java.util.Objects</strong> </p>
<ul>
<li>Objects的工具类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Objects</span> <span class="keyword">extends</span> <span class="title">Object</span></span></span><br></pre></td></tr></table></figure>



<h3 id="三、Date"><a href="#三、Date" class="headerlink" title="三、Date"></a>三、Date</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.Object </span><br><span class="line">	java.util.Date </span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dateextends</span> <span class="title">Objectimplements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span>, <span class="title">Comparable</span>&lt;<span class="title">Date</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <code>Date</code> 表示特定的瞬间，精确到毫秒。</p>
<h5 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h5><h6 id="Date"><a href="#Date" class="headerlink" title="Date()"></a>Date()</h6><ul>
<li>创建一个当前时间的Date 对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>分配一个 <code>Date</code>对象，并将其初始化为表示从标准基准时间（称为“时代”）即1970年1月1日00:00:00 GMT起的指定毫秒数。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">(<span class="keyword">long</span> date)</span></span></span><br></pre></td></tr></table></figure>


<h5 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h5><h6 id="after"><a href="#after" class="headerlink" title="after"></a>after</h6><ul>
<li>测试此日期是否在指定日期之后。 晚则返回true</li>
<li>NullPointerException - 如果 when为空。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">after</span><span class="params">(Date when)</span></span></span><br></pre></td></tr></table></figure>

<h6 id="before"><a href="#before" class="headerlink" title="before"></a>before</h6><ul>
<li>测试此日期是否在指定日期之前</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">before</span><span class="params">(Date when)</span></span></span><br></pre></td></tr></table></figure>

<h6 id="equals-1"><a href="#equals-1" class="headerlink" title="equals"></a>equals</h6><ul>
<li>当且仅当<code>getTime</code>方法返回相同的<code>long</code>值时，两个<code>Date</code>对象相等</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span></span><br></pre></td></tr></table></figure>

<h6 id="compareTo"><a href="#compareTo" class="headerlink" title="compareTo"></a>compareTo</h6><ul>
<li>如果参数Date等于此Date，则值为0 ; </li>
<li>如果此日期在Date参数之前，该值小于0 ; </li>
<li>如果此日期在Date参数0则值大于0</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Date anotherDate)</span></span></span><br></pre></td></tr></table></figure>

<h6 id="toString"><a href="#toString" class="headerlink" title="toString"></a>toString</h6><ul>
<li><p>Date对象转换为String的形式：</p>
</li>
<li><p><code>dow mon dd hh:mm:ss zzz yyyy</code></p>
</li>
<li><p><code>dow</code>是星期几（ <code>Sun, Mon, Tue, Wed, Thu, Fri, Sat</code> ）。  </p>
</li>
<li><p><code>mon</code>是月（ <code>Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct,  Nov, Dec</code> ）。  </p>
</li>
<li><p><code>dd</code>是一个月的日子（ <code>01</code>到<code>31</code> ），作为两位十进制数字。  </p>
</li>
<li><p><code>hh</code>是一天的小时（ <code>00</code>到<code>23</code> ），作为两位十进制数字。  </p>
</li>
<li><p><code>mm</code>是一小时内的分钟（ <code>00</code>至<code>59</code> ），为两位十进制数字。  </p>
</li>
<li><p><code>ss</code>是分钟内的第二个（ <code>00</code>到<code>61</code> ，作为两位十进制数字。  </p>
</li>
<li><p><code>zzz</code>是时区（可能反映夏令时）。 标准时区缩写包括通过方法<code>parse识别的缩写</code>  。 如果时区信息不可用，那么<code>zzz</code>是空的 - 也就是说，它根本没有字符。  </p>
</li>
<li><p><code>年份</code>为<code>yyyy</code> ，为四位十进制数字。 </p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<h6 id="setTime"><a href="#setTime" class="headerlink" title="setTime"></a>setTime</h6><ul>
<li>设置此 Date对象以表示1970年1月1日00:00:00 GMT后的 time毫秒的时间点</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(<span class="keyword">long</span> time)</span></span></span><br></pre></td></tr></table></figure>



<h3 id="四、SimpleDateFormat"><a href="#四、SimpleDateFormat" class="headerlink" title="四、SimpleDateFormat"></a>四、SimpleDateFormat</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.Object </span><br><span class="line">	java.text.Format </span><br><span class="line">		java.text.DateFormat </span><br><span class="line">			java.text.SimpleDateFormat </span><br></pre></td></tr></table></figure>

<p>日期格式化类</p>
<h5 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h5><h6 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h6><ul>
<li>获取 SimpleDateFormat 对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimpleDateFormat</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<h6 id="DateFormat-getInstance"><a href="#DateFormat-getInstance" class="headerlink" title="DateFormat getInstance"></a>DateFormat getInstance</h6><ul>
<li>获取 DateFormat 对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DateFormat <span class="title">getInstance</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<h6 id="SimpleDateFormat-1"><a href="#SimpleDateFormat-1" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h6><ul>
<li>pattern，<code>yyyy-MM-dd HH:mm:ss</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimpleDateFormat</span><span class="params">(String pattern)</span></span></span><br></pre></td></tr></table></figure>



<h5 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h5><h6 id="format"><a href="#format" class="headerlink" title="format"></a>format</h6><ul>
<li>将日期格式化成日期/时间字符串。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">format</span><span class="params">(Date date)</span></span></span><br></pre></td></tr></table></figure>

<h6 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h6><ul>
<li>将字符串转换成Date 对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">parse</span><span class="params">(String source)</span></span></span><br><span class="line"><span class="function">           <span class="keyword">throws</span> ParseException</span></span><br></pre></td></tr></table></figure>

<h3 id="五、Calendar"><a href="#五、Calendar" class="headerlink" title="五、Calendar"></a>五、Calendar</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.Object </span><br><span class="line">	java.util.Calendar </span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>Calendar</code>对象可以产生实现特定语言和日历风格的日期时间格式化所需的所有日历字段值</p>
</li>
<li><p>进行日期计算</p>
</li>
</ul>
<p>构造</p>
<h5 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h5><h6 id="getInstance"><a href="#getInstance" class="headerlink" title="getInstance"></a>getInstance</h6><ul>
<li>使用默认时区和区域设置获取日历。 Calendar返回的是基于默认时区的当前时间，默认为FORMAT区域设置。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h6 id="add"><a href="#add" class="headerlink" title="add"></a>add</h6><ul>
<li>根据日历的规则，将指定的时间量添加或减去给定的日历字段。 例如，要从当前日历的时间减去5天，您可以通过调用以下方法来实现： </li>
<li>add(Calendar.DAY_OF_MONTH, -5) 。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> field,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">int</span> amount)</span></span></span><br></pre></td></tr></table></figure>

<h6 id="after-1"><a href="#after-1" class="headerlink" title="after"></a>after</h6><ul>
<li>Calendar 对象在when之后，true</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">after</span><span class="params">(Object when)</span></span></span><br></pre></td></tr></table></figure>

<h6 id="before-1"><a href="#before-1" class="headerlink" title="before"></a>before</h6><ul>
<li>Calendar 对象在when之前，true</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">before</span><span class="params">(Object when)</span></span></span><br></pre></td></tr></table></figure>

<h6 id="compareTo-1"><a href="#compareTo-1" class="headerlink" title="compareTo"></a>compareTo</h6><ul>
<li>如果所述参数表示的时间等于对象表示的时间Calendar，值0 ; </li>
<li>如果此时Calendar是由参数表示的时间之前，值小于0; </li>
<li>如果Calendar的时间在参数表示的时间之后，则值大于0 。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Calendar anotherCalendar)</span></span></span><br></pre></td></tr></table></figure>

<h6 id="get"><a href="#get" class="headerlink" title="get"></a>get</h6><ul>
<li>返回给定日历字段的值。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> field)</span></span></span><br></pre></td></tr></table></figure>

<h6 id="getTime"><a href="#getTime" class="headerlink" title="getTime"></a>getTime</h6><ul>
<li>转换为 Date 对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Date <span class="title">getTime</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<h6 id="getTimeInMillis"><a href="#getTimeInMillis" class="headerlink" title="getTimeInMillis"></a>getTimeInMillis</h6><ul>
<li>当前时间为UTC的毫秒数。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTimeInMillis</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<h6 id="set"><a href="#set" class="headerlink" title="set"></a>set</h6><ul>
<li>设置值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> field,<span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> year,<span class="keyword">int</span> month, <span class="keyword">int</span> date)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> year,<span class="keyword">int</span> month, <span class="keyword">int</span> date,<span class="keyword">int</span> hourOfDay, <span class="keyword">int</span> minute)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> year,<span class="keyword">int</span> month,<span class="keyword">int</span> date,<span class="keyword">int</span> hourOfDay,<span class="keyword">int</span> minute,<span class="keyword">int</span> second)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">// 设置字段中的值YEAR ， MONTH ， DAY_OF_MONTH ， HOUR_OF_DAY ， MINUTE和SECOND  保留其他字段的以前的值</span></span></span><br></pre></td></tr></table></figure>

<h6 id="setTime-1"><a href="#setTime-1" class="headerlink" title="setTime"></a>setTime</h6><ul>
<li>使用给定的Date设置此日历的时间。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(Date date)</span></span></span><br></pre></td></tr></table></figure>

<h3 id="六、Math"><a href="#六、Math" class="headerlink" title="六、Math"></a>六、Math</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.Object </span><br><span class="line">	java.lang.Math </span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Mathextends</span> <span class="title">Object</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>Math类包含执行基本数字运算的方法，如基本指数，对数，平方根和三角函数。 </li>
<li>Math 只是一个工具类</li>
</ul>
<h5 id="方法-4"><a href="#方法-4" class="headerlink" title="方法"></a>方法</h5><h6 id="abs"><a href="#abs" class="headerlink" title="abs"></a>abs</h6><ul>
<li>返回绝对值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">abs</span><span class="params">(<span class="keyword">double</span> a)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">abs</span><span class="params">(<span class="keyword">float</span> a)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">abs</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">abs</span><span class="params">(<span class="keyword">long</span> a)</span></span></span><br></pre></td></tr></table></figure>

<h6 id="max"><a href="#max" class="headerlink" title="max"></a>max</h6><ul>
<li>返回最大值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> a,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function">    </span></span><br></pre></td></tr></table></figure>

<h6 id="min"><a href="#min" class="headerlink" title="min"></a>min</h6><ul>
<li>返回最小值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">int</span> b)</span></span></span><br></pre></td></tr></table></figure>

<h6 id="multiplyExact"><a href="#multiplyExact" class="headerlink" title="multiplyExact"></a>multiplyExact</h6><ul>
<li>multiplyExact返回参数的乘积，如果结果溢出int，则抛出 int 。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">multiplyExact</span><span class="params">(<span class="keyword">int</span> x,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">int</span> y)</span></span></span><br></pre></td></tr></table></figure>

<h6 id="ceil"><a href="#ceil" class="headerlink" title="ceil"></a>ceil</h6><ul>
<li>返回大于等于参数的最小整数的double类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">ceil</span><span class="params">(<span class="keyword">double</span> a)</span></span></span><br></pre></td></tr></table></figure>

<h6 id="floor"><a href="#floor" class="headerlink" title="floor"></a>floor</h6><ul>
<li>返回小于等于参数的最小整数的double类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">floor</span><span class="params">(<span class="keyword">double</span> a)</span></span></span><br></pre></td></tr></table></figure>

<h6 id="pow"><a href="#pow" class="headerlink" title="pow"></a>pow</h6><ul>
<li>a的b次幂</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> a,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">double</span> b)</span></span></span><br></pre></td></tr></table></figure>

<h6 id="round"><a href="#round" class="headerlink" title="round"></a>round</h6><ul>
<li>四舍五入到整数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">round</span><span class="params">(<span class="keyword">double</span> a)</span></span></span><br></pre></td></tr></table></figure>

<h3 id="七、System"><a href="#七、System" class="headerlink" title="七、System"></a>七、System</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.Object </span><br><span class="line">	java.lang.System </span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">System</span> <span class="keyword">extends</span> <span class="title">Object</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>System</code>类提供的<code>System</code>包括标准输入，标准输出和错误输出流;  </li>
<li>访问外部定义的属性和环境变量; </li>
<li>一种加载文件和库的方法;  </li>
<li>以及用于快速复制阵列的一部分的实用方法。</li>
</ul>
<h5 id="方法-5"><a href="#方法-5" class="headerlink" title="方法"></a>方法</h5><h6 id="currentTimeMillis"><a href="#currentTimeMillis" class="headerlink" title="currentTimeMillis"></a>currentTimeMillis</h6><ul>
<li>在1970年1月1日UTC之间的当前时间和午夜之间的差异，以毫秒为单位。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">currentTimeMillis</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<h6 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h6><ul>
<li>终止当前运行的Java虚拟机。 该参数作为状态代码; 按照惯例，非零状态码表示异常终止。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> status)</span></span></span><br></pre></td></tr></table></figure>

<h6 id="gc"><a href="#gc" class="headerlink" title="gc"></a>gc</h6><ul>
<li>调用gc方法表明，Java虚拟机花费了回收未使用对象的努力，以使其当前占用的内存可以快速重用。 当控件从方法调用返回时，Java虚拟机已经尽力从所有丢弃的对象中回收空间。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gc</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<h6 id="arraycopy"><a href="#arraycopy" class="headerlink" title="arraycopy"></a>arraycopy</h6><ul>
<li>将指定源数组中的数组从指定位置复制到目标数组的指定位置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src, // 原数组</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> srcPos, // 原数组开始复制的索引</span></span></span><br><span class="line"><span class="function"><span class="params">                             Object dest,// 目标数组</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> destPos,// 复制到的目标数组的位置</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> length)</span> <span class="comment">// 复制的原数组长度</span></span></span><br></pre></td></tr></table></figure>

<h3 id="八、BigDecimal"><a href="#八、BigDecimal" class="headerlink" title="八、BigDecimal"></a>八、BigDecimal</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.Object </span><br><span class="line">	java.lang.Number </span><br><span class="line">        java.math.BigDecimal </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigDecimal</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">BigDecimal</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>基本类型计算会丢失精度，BigDecimal不会</li>
</ul>
<h5 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h5><h6 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h6><ul>
<li>将指定类型转为BigDecimal</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BigDecimal</span><span class="params">(String val)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BigDecimal</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BigDecimal</span><span class="params">(<span class="keyword">double</span> val)</span></span></span><br></pre></td></tr></table></figure>

<h5 id="方法-6"><a href="#方法-6" class="headerlink" title="方法"></a>方法</h5><h6 id="abs-1"><a href="#abs-1" class="headerlink" title="abs"></a>abs</h6><ul>
<li>返回一个 BigDecimal ，其值为此 BigDecimal的绝对值，其缩放比例为 this.scale() 。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">abs</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<h6 id="add-1"><a href="#add-1" class="headerlink" title="add"></a>add</h6><ul>
<li>加法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">add</span><span class="params">(BigDecimal augend)</span></span></span><br></pre></td></tr></table></figure>

<h6 id="compareTo-2"><a href="#compareTo-2" class="headerlink" title="compareTo"></a>compareTo</h6><ul>
<li>小于，-1；等于，0；大于，1；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(BigDecimal val)</span></span></span><br></pre></td></tr></table></figure>

<h6 id="divide"><a href="#divide" class="headerlink" title="divide"></a>divide</h6><ul>
<li>其值是(this / divisor) ，除法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">divide</span><span class="params">(BigDecimal divisor)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">divide</span><span class="params">(BigDecimal divisor,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">int</span> scale,  			// 保留几位小数</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">int</span> roundingMode)</span>		<span class="comment">// </span></span></span><br></pre></td></tr></table></figure>

<h6 id="max-1"><a href="#max-1" class="headerlink" title="max"></a>max</h6><ul>
<li>返回最大值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">max</span><span class="params">(BigDecimal val)</span></span></span><br></pre></td></tr></table></figure>

<h6 id="min-1"><a href="#min-1" class="headerlink" title="min"></a>min</h6><ul>
<li>返回最小值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">min</span><span class="params">(BigDecimal val)</span></span></span><br></pre></td></tr></table></figure>

<h6 id="subtract"><a href="#subtract" class="headerlink" title="subtract"></a>subtract</h6><ul>
<li>减法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">subtract</span><span class="params">(BigDecimal subtrahend)</span></span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Lambda</title>
    <url>/myblog/2020/12/12/lambda/</url>
    <content><![CDATA[<h1 id="lambada-表达式"><a href="#lambada-表达式" class="headerlink" title="lambada 表达式"></a>lambada 表达式</h1><p>lambada 表达式实质上是一个匿名方法，但该方法并非独立执行，而是用于实现由函数式接口定义的唯一抽象方法</p>
<p>函数式接口：</p>
 <a id="more"></a>     

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">函数式接口是仅含一个抽象方法的接口，但可以指定 Object 定义的任何公有方法。</span><br><span class="line"><span class="meta">@FunctionalInterface</span>   标识函数式接口（可有可无）</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IFunctionMulti</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Number</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">multi</span><span class="params">(List&lt;T&gt; numbers)</span></span>; <span class="comment">// 抽象方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;  <span class="comment">// Object中的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>lambda表达式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">单独表达式</span><br><span class="line">list.forEach(item -&gt; System.out.println(item));</span><br><span class="line"></span><br><span class="line">包含代码块</span><br><span class="line">list.forEach(item -&gt; &#123;</span><br><span class="line">  <span class="keyword">int</span> numA = item.getNumA();</span><br><span class="line">  <span class="keyword">int</span> numB = item.getNumB();</span><br><span class="line">    System.out.println(numA + numB);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>异步调用</title>
    <url>/myblog/2020/12/12/%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h1 id="异步调用"><a href="#异步调用" class="headerlink" title="异步调用"></a>异步调用</h1><p>异步请求：指<code>ajax</code>异步请求数据，不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容</p>
<p>异步调用：指通过多线程先主线程 return，另一线程继续执行对返回结果无关的逻辑。</p>
 <a id="more"></a> 

<p>一、<code>spring boot</code> 的<code>@Async</code>注解实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 在启动类添加 @EnableAsync 注解开启异步，使得 @Async 可用</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(Application.class,args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. controller service 不变</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> TestService testService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/async&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getAsync</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> l1 = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;l1&quot;</span>+l1);</span><br><span class="line">    <span class="comment">//异步</span></span><br><span class="line">    String s = testService.async();</span><br><span class="line">	<span class="keyword">long</span> l2 = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;l2&quot;</span>+l2);</span><br><span class="line">    <span class="keyword">return</span> s + <span class="string">&quot; 时间: &quot;</span> + (l2-l1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span> <span class="keyword">implements</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> SleepService sleepService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">async</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;主线程 &quot;</span>+Thread.currentThread().getName());</span><br><span class="line">      sleepService.asyncSleep();</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;return了&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 在需要异步执行的方法上添加 @Async注解</span></span><br><span class="line"><span class="comment">// 不能在同一类下调用@Async注解的方法,比如A类下有a和b方法,b方法有@Async注解,不能直接这样a调用b,要把b放到其他类中</span></span><br><span class="line"><span class="comment">// @Async也可以写在类上,这样类下面的所有方法都是异步的(被其他类调用的时候)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepServiceImpl</span> <span class="keyword">implements</span> <span class="title">SleepService</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="meta">@Async</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncSleep</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;次线程 &quot;</span>+Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;开始异步休眠3秒&quot;</span>);</span><br><span class="line">    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;异步休眠休眠结束&quot;</span>);</span><br><span class="line">    <span class="keyword">long</span> l3 = System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;l3&quot;</span>+l3);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>二、开启一个新线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这样写的方法会异步执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 写一个类继承 Thread 类， 重写里面的run方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开启线程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建对象，调用start 方法，就开启线程并执行线程中的run方法了</span></span><br><span class="line">    TestThread testThread = <span class="keyword">new</span> TestThread();</span><br><span class="line">    testThread.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 写一个类实现 Runnable接口，并实现里面的run方法。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;新线程已经开启&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 然后new Thread并把new TestRunnable()当参数传递进去。</span></span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> TestRunnable());</span><br><span class="line">    thread.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名内部类写法</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">&quot;开启多线程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// lambda 简写写法</span></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;开启多线程&quot;</span>);</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Callable </span></span><br><span class="line"><span class="comment">// Object 为返回值类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;返回值&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建FutureTask对象，参数为TestCallable对象，泛型为call返回值类型</span></span><br><span class="line"><span class="comment">//new Thread,将FutureTask对象传入</span></span><br><span class="line">FutureTask&lt;String&gt; task = <span class="keyword">new</span> FutureTask&lt;String&gt;(<span class="keyword">new</span> TestCallable());</span><br><span class="line"><span class="keyword">new</span> Thread(task).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名内部类</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> FutureTask&lt;String&gt;(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开启&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;开启&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)).start();</span><br><span class="line"><span class="comment">// lambda简写</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> FutureTask&lt;String&gt;(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;开启&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;开启&quot;</span>;</span><br><span class="line">&#125;)).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.线程池</span></span><br><span class="line">ExecutorService pool = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">ThreadPoolExecutor executor = (ThreadPoolExecutor) pool;</span><br><span class="line"><span class="comment">// 使用executor方法传入 Runnable</span></span><br><span class="line">executor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>或与非</title>
    <url>/myblog/2020/12/12/%E6%88%96%E4%B8%8E%E9%9D%9E/</url>
    <content><![CDATA[<h1 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp; || !`"></a>&amp;&amp; || !`</h1><p>[toc]</p>
<h6 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo01.qianji.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wushutong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/11/16 11:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span>或与非 </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> c = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> d = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> e = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> f = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> g = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> h = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Description //TODO</span></span><br><span class="line"><span class="comment"> * @Author</span></span><br><span class="line"><span class="comment"> * @Date 10:03 2020/11/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        tset或();</span></span><br><span class="line"><span class="comment">//        tset与();</span></span><br><span class="line"><span class="comment">//        tset非();</span></span><br><span class="line">        tset或与非();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">         || 从左到右以此运算，有true 就停止运算</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> tset或()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;或：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> ((a=<span class="number">10</span>) &lt; f || (b=<span class="number">10</span>) &lt; f || (c=<span class="number">10</span>) &gt; f || (d=<span class="number">10</span>) == f)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;a:&quot;</span> + a);</span><br><span class="line">        System.out.println(<span class="string">&quot;b:&quot;</span> + b);</span><br><span class="line">        System.out.println(<span class="string">&quot;c:&quot;</span> + c);</span><br><span class="line">        System.out.println(<span class="string">&quot;d:&quot;</span> + d);</span><br><span class="line">        System.out.println(<span class="string">&quot;e:&quot;</span> + e);</span><br><span class="line">        System.out.println(<span class="string">&quot;f:&quot;</span> + f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        &amp;&amp; 是从左到右以此运算，有false 就停止运算</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> tset与()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;与：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> ((a=<span class="number">10</span>) &gt; f &amp;&amp; (b=<span class="number">10</span>) &gt; f &amp;&amp; (c=<span class="number">10</span>) &lt; f &amp;&amp; (d=<span class="number">10</span>) == f)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;a:&quot;</span> + a);</span><br><span class="line">        System.out.println(<span class="string">&quot;b:&quot;</span> + b);</span><br><span class="line">        System.out.println(<span class="string">&quot;c:&quot;</span> + c);</span><br><span class="line">        System.out.println(<span class="string">&quot;d:&quot;</span> + d);</span><br><span class="line">        System.out.println(<span class="string">&quot;e:&quot;</span> + e);</span><br><span class="line">        System.out.println(<span class="string">&quot;f:&quot;</span> + f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        ! 取反，true 是 false</span></span><br><span class="line"><span class="comment">               false 是 true</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> tset非()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;非：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!(a &gt; b)) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;a:&quot;</span> + a);</span><br><span class="line">        System.out.println(<span class="string">&quot;b:&quot;</span> + b);</span><br><span class="line">        System.out.println(<span class="string">&quot;c:&quot;</span> + c);</span><br><span class="line">        System.out.println(<span class="string">&quot;d:&quot;</span> + d);</span><br><span class="line">        System.out.println(<span class="string">&quot;e:&quot;</span> + e);</span><br><span class="line">        System.out.println(<span class="string">&quot;f:&quot;</span> + f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        || 与 &amp;&amp; 同时使用</span></span><br><span class="line"><span class="comment">        按照多个 || 的执行方式。将&amp;&amp; 链接的看成一个整体，再用 || 链接起来组成所有判断。</span></span><br><span class="line"><span class="comment">        如果一个 || 中的 &amp;&amp; 为 true ，则停止执行。</span></span><br><span class="line"><span class="comment">        如果一个 || 中的 &amp;&amp; 执行到了flase ，则停下此 || 中的 &amp;&amp;，执行下一个 || 中的判断</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> tset或与非()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;或与非：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> ((a=<span class="number">10</span>) &gt; f &amp;&amp; (b=<span class="number">10</span>) &lt; f &amp;&amp; (c=<span class="number">10</span>) &lt; f || (d=<span class="number">10</span>) == f &amp;&amp; (e=<span class="number">10</span>) &gt; f || (f=<span class="number">10</span>) &gt; i &amp;&amp; (g=<span class="number">10</span>) &gt; i || (h=<span class="number">10</span>) &gt; i)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;a:&quot;</span> + a);</span><br><span class="line">        System.out.println(<span class="string">&quot;b:&quot;</span> + b);</span><br><span class="line">        System.out.println(<span class="string">&quot;c:&quot;</span> + c);</span><br><span class="line">        System.out.println(<span class="string">&quot;d:&quot;</span> + d);</span><br><span class="line">        System.out.println(<span class="string">&quot;e:&quot;</span> + e);</span><br><span class="line">        System.out.println(<span class="string">&quot;f:&quot;</span> + f);</span><br><span class="line">        System.out.println(<span class="string">&quot;g:&quot;</span> + g);</span><br><span class="line">        System.out.println(<span class="string">&quot;h:&quot;</span> + h);</span><br><span class="line">        System.out.println(<span class="string">&quot;i:&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>汉语转拼音</title>
    <url>/myblog/2020/12/12/%E6%B1%89%E8%AF%AD%E8%BD%AC%E6%8B%BC%E9%9F%B3/</url>
    <content><![CDATA[<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.belerweb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pinyin4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

 <a id="more"></a> 

<table>
<thead>
<tr>
<th>HanyuPinyinOutputFormat 对象的属性</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>HanyuPinyinCaseType</td>
<td>设置拼音的大小写</td>
<td>LOWERCASE <br/> UPPERCASE</td>
<td>小写<br/> 大写</td>
</tr>
<tr>
<td>HanyuPinyinToneType</td>
<td>设置拼音的音调</td>
<td>WITH_TONE_NUMBER<br/> WITHOUT_TONE<br/> WITH_TONE_MARK</td>
<td>用数字表示音调。如：wo3<br/> 不表示音调。如：wo <br/>用符号表示音调。如：wŏ</td>
</tr>
<tr>
<td>HanyuPinyinVCharType</td>
<td>设置拼音的表示方法</td>
<td>WITH_U_AND_COLON<br/>  WITH_V<br/> WITH_U_UNICODE</td>
<td>用字母u和冒号表示。如：u: <br/> 用字母v表示。如：v <br/>用Unicode编码表示。如：ü</td>
</tr>
</tbody></table>
<h6 id="1-HanyuPinyinOutputFormat"><a href="#1-HanyuPinyinOutputFormat" class="headerlink" title="1. HanyuPinyinOutputFormat"></a>1. HanyuPinyinOutputFormat</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line">HanyuPinyinOutputFormat hanyuPinyinOutputFormat = <span class="keyword">new</span> HanyuPinyinOutputFormat();</span><br><span class="line"><span class="comment">// 创建对象默认属性</span></span><br><span class="line">    vCharType = HanyuPinyinVCharType.WITH_U_AND_COLON;  <span class="comment">// u:</span></span><br><span class="line">    caseType = HanyuPinyinCaseType.LOWERCASE;			<span class="comment">// 小写</span></span><br><span class="line">    toneType = HanyuPinyinToneType.WITH_TONE_NUMBER;	<span class="comment">// 数字音调</span></span><br><span class="line"><span class="comment">// 设置属性</span></span><br><span class="line">hanyuPinyinOutputFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);</span><br><span class="line">hanyuPinyinOutputFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);</span><br><span class="line">hanyuPinyinOutputFormat.setVCharType(HanyuPinyinVCharType.WITH_V);</span><br></pre></td></tr></table></figure>

<h6 id="2-PinyinHelper-将汉语繁简体转为罗马字符"><a href="#2-PinyinHelper-将汉语繁简体转为罗马字符" class="headerlink" title="2. PinyinHelper 将汉语繁简体转为罗马字符"></a>2. PinyinHelper 将汉语繁简体转为罗马字符</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 将汉字字符转为拼音数组，如果不是汉字则返回null</span></span><br><span class="line">String[] nis = PinyinHelper.toHanyuPinyinStringArray(<span class="string">&#x27;将&#x27;</span>,hanyuPinyinOutputFormat); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 将汉语转换成拼音字符串，保留第一个拼音</span></span><br><span class="line"><span class="comment">// @param 1 汉语字符串</span></span><br><span class="line"><span class="comment">// @param 2 HanyuPinyinOutputFormat 转换格式</span></span><br><span class="line"><span class="comment">// @param 3 分隔符，在每个汉字之后添加，不是汉字不添加，最后一个汉字之前不添加</span></span><br><span class="line"><span class="comment">// @param 4 是否保留非汉字文字</span></span><br><span class="line">String s = PinyinHelper.toHanYuPinyinString(<span class="string">&quot;苄ni天气真好&quot;</span>, hanyuPinyinOutputFormat, <span class="string">&quot;&quot;</span>, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo01.qianji.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sourceforge.pinyin4j.format.HanyuPinyinCaseType;</span><br><span class="line"><span class="keyword">import</span> net.sourceforge.pinyin4j.format.HanyuPinyinVCharType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sourceforge.pinyin4j.PinyinHelper;</span><br><span class="line"><span class="keyword">import</span> net.sourceforge.pinyin4j.format.HanyuPinyinOutputFormat;</span><br><span class="line"><span class="keyword">import</span> net.sourceforge.pinyin4j.format.HanyuPinyinToneType;</span><br><span class="line"><span class="keyword">import</span> net.sourceforge.pinyin4j.format.exception.BadHanyuPinyinOutputFormatCombination;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * pinyin4j汉字转拼音工具类</span></span><br><span class="line"><span class="comment"> * 支持繁体简体转拼音</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeToPinYin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> // 汉字转拼音  version 2.5.1 此方法可能下版本失效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> wushutong</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 11:52 2020/10/23</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> HanZi  汉字字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> retain 结果是否保留非汉字部分</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 例如：你好**啊！ nihao**a!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toSimplePinYin</span><span class="params">(String HanZi, <span class="keyword">boolean</span> retain)</span> </span>&#123;</span><br><span class="line">        HanyuPinyinOutputFormat hanyuPinyinOutputFormat = <span class="keyword">new</span> HanyuPinyinOutputFormat();</span><br><span class="line">        hanyuPinyinOutputFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);</span><br><span class="line">        hanyuPinyinOutputFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);</span><br><span class="line">        hanyuPinyinOutputFormat.setVCharType(HanyuPinyinVCharType.WITH_V);</span><br><span class="line">        String s = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            s = PinyinHelper.toHanYuPinyinString(HanZi, hanyuPinyinOutputFormat, <span class="string">&quot;&quot;</span>, retain);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BadHanyuPinyinOutputFormatCombination badHanyuPinyinOutputFormatCombination) &#123;</span><br><span class="line">            badHanyuPinyinOutputFormatCombination.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toSimplePinYin</span><span class="params">(String HanZi, HanyuPinyinOutputFormat format, <span class="keyword">boolean</span> retain)</span> </span>&#123;</span><br><span class="line">        String s = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            s = PinyinHelper.toHanYuPinyinString(HanZi, format, <span class="string">&quot;&quot;</span>, retain);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BadHanyuPinyinOutputFormatCombination badHanyuPinyinOutputFormatCombination) &#123;</span><br><span class="line">            badHanyuPinyinOutputFormatCombination.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//pinyin4j格式类</span></span><br><span class="line">    <span class="keyword">private</span> HanyuPinyinOutputFormat format = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//拼音字符串数组</span></span><br><span class="line">    <span class="keyword">private</span> String[] pinyin;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过构造方法进行初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChangeToPinYin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        format = <span class="keyword">new</span> HanyuPinyinOutputFormat();</span><br><span class="line">        format.setToneType(HanyuPinyinToneType.WITHOUT_TONE);</span><br><span class="line">        format.setCaseType(HanyuPinyinCaseType.LOWERCASE);</span><br><span class="line">        format.setVCharType(HanyuPinyinVCharType.WITH_V);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对单个字进行转换</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pinYinStr 需转换的汉字字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 拼音字符串数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getCharPinYin</span><span class="params">(<span class="keyword">char</span> pinYinStr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//执行转换</span></span><br><span class="line">            pinyin = PinyinHelper.toHanyuPinyinStringArray(pinYinStr, format);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BadHanyuPinyinOutputFormatCombination e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pinyin == <span class="keyword">null</span> || pinyin.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//多音字会返回一个多音字拼音的数组，pinyiin4j并不能有效判断该字的读音</span></span><br><span class="line">        <span class="keyword">return</span> pinyin[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对字符串进行转换</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pinYinStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStringPinYin</span><span class="params">(String pinYinStr)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        String tempStr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//循环字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pinYinStr.length(); i++) &#123;</span><br><span class="line">            tempStr = <span class="keyword">this</span>.getCharPinYin(pinYinStr.charAt(i));</span><br><span class="line">            <span class="keyword">if</span> (tempStr == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//非汉字直接拼接</span></span><br><span class="line">                sb.append(pinYinStr.charAt(i));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(tempStr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/myblog/2020/12/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>[toc]</p>
<h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p> 设计模式（Design pattern）代表了最佳的实践。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。 </p>
 <a id="more"></a> 

<p> 设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。  </p>
<h5 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h5><p> 一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。 </p>
<ul>
<li>定义抽象方法让子类实现</li>
<li>定义fianl 修饰的模板方法，用来执行相同的逻辑</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">endPlay</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//模板</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//初始化游戏</span></span><br><span class="line">      initialize();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//开始游戏</span></span><br><span class="line">      startPlay();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//结束游戏</span></span><br><span class="line">      endPlay();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
